#!/usr/bin/env ruby
require "ruby-debug"
require 'fileutils'

# pngcrush -rem allb -reduce -brute original.png optimized.png
# pngcrush -d target-dir/ *.png
#
# -rem allb — remove all extraneous data (Except transparency and gamma; to remove everything except transparency, try -rem alla)
# -reduce — eliminate unused colors and reduce bit-depth (If possible)
#
# -brute — attempt all optimization methods (Requires MUCH MORE processing time and may not improve optimization by much)
#
# original.png — the name of the original (unoptimized) PNG file
# optimized.png — the name of the new, optimized PNG file
# -d target-dir/  — bulk convert into this directory "target-dir"
#
# -rem cHRM -rem sRGB -rem gAMA -rem ICC — remove color profiles by name (shortcut -rem alla)
#
# An article explaining why removing gamma correction
# http://hsivonen.iki.fi/png-gamma/

# Rails: file activesupport/lib/active_support/core_ext/string/starts_ends_with.rb, line 27
def ends_with?(string, suffix)
  string[-suffix.length, suffix.length] == suffix
end

def indented_puts(str="")
  puts "  #{str}"
end

def print_manual
  script_name = "optimize-png"

  indented_puts
  indented_puts script_name
  indented_puts "=" *script_name.size
  indented_puts "- Removes color profiles: cHRM, sRGB, gAMA, ICC, etc."
  indented_puts "- Eliminates unused colors and reduce bit-depth (If possible)"
  indented_puts "- May reduce PNG file size lossless"
  indented_puts
  indented_puts "Batch optimize all *.png in current directory:"
  indented_puts "  #{script_name} directory"
  indented_puts
  indented_puts "Optimize single file:"
  indented_puts "  #{script_name} input.png"
  indented_puts
end

def optimization_default_args
  args = ""
  args << "-rem alla " # remove everything except transparency
  args << "-rem text " # remove text chunks
  args << "-reduce " # eliminate unused colors and reduce bit-depth (If possible)
  args
end

def optimize_file(input_file, output_file)
  system "pngcrush #{optimization_default_args} '#{input_file}' '#{output_file}'"
end

def unused_tempfile_path(original)
  dirname = File.dirname(original)
  basename = File.basename(original)
  count = 0
  begin
    tmp_name = "#{dirname}/#{basename}_temp_#{count += 1}.png"
  end while File.exists?(tmp_name)
  tmp_name
end

def optimize_inplace(input_file)
  temp_file = unused_tempfile_path(input_file)
  result = optimize_file(input_file, temp_file)
  if result.nil?
    puts "Error was #{$?}"
  else
    FileUtils.rm(input_file)
    FileUtils.mv("#{temp_file}", "#{input_file}")
  end
end

def batch_optimize_inplace(path)
  # Dir[".png"] works case sensitive, so to catch all funky .png extensions we have to go the following way:
  png_relative_paths = []
  Dir["#{path}/*.*"].each do |file_name|
    png_relative_paths << file_name if ends_with?(File.basename(file_name.downcase), ".png")
  end
  png_relative_paths.each do |png_relative_path|
    optimize_inplace(png_relative_path)
  end
end

def main
  if ARGV.size == 1
    path = ARGV[0]
    if File.directory?(path)
      batch_optimize_inplace(path)
    elsif File.file?(path)
      optimize_inplace(path)
    end
    print_manual
    indented_puts "*** Error: '#{path}' is neither a directory nor a file ***"
    indented_puts
  else
    print_manual
  end
end

main()




